version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1

commands:
  destroy_infra:
    description: "Destroy created infrastructure if any job fails"
    parameters:
      authorName:
        type: string
        default: $NAME
    steps:
      - run:
          name: Delete Cloudformation stack
          when: on_fail
          command: |
            echo "Destroying infrastructure by << parameters.authorName >>"
            aws cloudformation delete-stack --stack-name course3Stack           

jobs:
  deploy_infra:
    executor: aws-cli/default
    working_directory: ~/project
    steps:
      - aws-cli/setup:
          aws-access-key-id: UDACITY_ACCESS
          aws-secret-access-key: UDACITY_SECRET
          aws-region: AWS_REGION
      - checkout
      - run:
          name: Deploy Cloudformation stack
          command: |
            aws cloudformation deploy --template-file template.yml --parameter-overrides file://template.json --stack-name course3Stack --region us-east-1
      - run:
          name: fetch instance DNS name
          command: |
            echo "[all]" > ~/inventory.txt
            aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:name, Values=Course3EC2" --output text >> ~/inventory.txt
      - persist_to_workspace:
          root:  ~/
          paths:
            - inventory.txt
      - destroy_infra

  configure_infra:
    docker:
      - image: python:3.8-alpine3.15
    working_directory: ~/project
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c4:7f:58:83:f1:c3:ec:1e:ad:dd:48:65:1e:21:d3:34"]
      - run:
          name: install openssh
          command: apk add --update openssh
      - run:
          name: Install dependencies
          command: |
            pwd && ls -a
            apk add --update ansible
      - run: apk add --update tar gzip
      - attach_workspace:
          at: ~/project
      - run:
          name: Configure server
          command: |
            ansible-playbook main-remote.yml -i ~/project/inventory.txt
      - destroy_infra

  # run_smoke_tests:
  #   executor: aws-cli/default
  #   steps:
  #     - aws-cli/setup:
  #         aws-access-key-id: UDACITY_ACCESS
  #         aws-secret-access-key: UDACITY_SECRET
  #         aws-region: AWS_REGION
  #     - checkout
  #     - run:
  #         name: test job
  #         command: |
  #           if curl -s --head $TEST_URL
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi
  #     - destroy_infra

  # create_new_bucket:
  #   executor: aws-cli/default
  #   steps:
  #     - aws-cli/setup:
  #         aws-access-key-id: UDACITY_ACCESS
  #         aws-secret-access-key: UDACITY_SECRET
  #         aws-region: AWS_REGION
  #     - checkout
  #     - run:
  #         name: Create new bucket
  #         command: |
  #           aws cloudformation deploy --template-file createBucket.yml --parameter-overrides S3BucketName="newbucket-${CIRCLE_WORKFLOW_ID:0:7}" --stack-name createNewBucket-${CIRCLE_WORKFLOW_ID:0:7}
  #           aws cloudformation list-exports --query "Exports[?Name==\`StackName\`].Value" --no-paginate --output text > ~/stackname.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths: 
  #           - stackname.txt
  #     - run: aws s3 sync . s3://newbucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  # get_last_deployment_id:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run: yum install -y tar gzip
  #     - run:
  #         name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
  #         command: |
  #           aws cloudformation list-exports --query "Exports[?Name==\`Pipeline-ID\`].Value" --no-paginate --output text > ~/textfile.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths: 
  #           - textfile.txt

  # promote_to_production:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Execute CloudFront template
  #         command: |
  #           aws cloudformation deploy --template-file createCloudfront.yml --stack-name production-distro --parameter-overrides S3BucketName="newbucket-${CIRCLE_WORKFLOW_ID:0:7}"
  
  # clean_up_old_deployment:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run: yum install -y tar gzip
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Destroy previous S3 bucket
  #         command: |
  #           OldBucketID=$(cat ~/textfile.txt)
  #           aws s3 rm "s3://${OldBucketID}" --recursive
  #           aws s3api delete-bucket --bucket $OldBucketID
  #     - run:
  #         name: delete previous stack that created the bucket 
  #         command: |
  #           OldStack=$(cat ~/stackname.txt)
  #           aws cloudformation delete-stack --stack-name $OldStack

workflows:
  blue-green-workflow:
    jobs:
      - deploy_infra:
          filters:
            branches:
              only: master
      - configure_infra:
          requires:
            - deploy_infra
      # - run_smoke_tests:
      #     requires:
      #       - deploy_infra
      #       - configure_infra
      
      # - create_new_bucket
      # - get_last_deployment_id
      # - promote_to_production:
      #     requires: 
      #       - create_new_bucket
      # - clean_up_old_deployment:
      #     requires:
      #       - get_last_deployment_id
      #       - promote_to_production
