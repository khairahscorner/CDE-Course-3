version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1

commands:
  destroy_infra:
    description: "Destroy created infrastructure if any job fails"
    parameters:
      authorName:
        type: string
        default: $NAME
    steps:
      - run:
          name: Delete Cloudformation stack
          when: on_fail
          command: |
            echo "Destroying infrastructure by << parameters.authorName >>"
            aws cloudformation delete-stack --stack-name stack-$CIRCLE_WORKFLOW_ID           

jobs:
  # deploy_infra:
  #   executor: aws-cli/default
  #   working_directory: ~/project
  #   steps:
  #     - aws-cli/setup:
  #         aws-access-key-id: UDACITY_ACCESS
  #         aws-secret-access-key: UDACITY_SECRET
  #         aws-region: AWS_REGION
  #     - checkout
  #     - run:
  #         name: Deploy Cloudformation stack
  #         command: |
  #           aws cloudformation deploy --template-file template.yml --parameter-overrides file://template.json --stack-name stack-$CIRCLE_WORKFLOW_ID --region us-east-1

  # configure_infra:
  #   docker:
  #     - image: python:3.8-alpine3.15
  #   working_directory: ~/project
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["c4:7f:58:83:f1:c3:ec:1e:ad:dd:48:65:1e:21:d3:34"]
  #     - run:
  #         name: install openssh
  #         command: apk add --update openssh
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           pwd && ls -a
  #           apk add --update ansible
  #     - run:
  #         name: Configure server
  #         command: |
  #           ansible-playbook main-remote.yml -i inventory

  # run_smoke_tests:
  #   executor: aws-cli/default
  #   steps:
  #     - aws-cli/setup:
  #         aws-access-key-id: UDACITY_ACCESS
  #         aws-secret-access-key: UDACITY_SECRET
  #         aws-region: AWS_REGION
  #     - checkout
  #     - run:
  #         name: test job
  #         command: |
  #           if curl -s --head $TEST_URL
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi
  #     - destroy_infra

  create_new_bucket:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          aws-access-key-id: UDACITY_ACCESS
          aws-secret-access-key: UDACITY_SECRET
          aws-region: AWS_REGION
      - checkout
      - run:
          name: Create new bucket
          command: |
            aws cloudformation deploy --template-file createBucket.yml --parameter-overrides S3BucketName="newbucket-${CIRCLE_WORKFLOW_ID:0:7}" --stack-name createNewBucket-${CIRCLE_WORKFLOW_ID:0:7}
      - run: aws s3 sync . s3://newbucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation list-exports --query "Exports[?Name==\`Pipeline-ID\`].Value" --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute CloudFront template
          command: |
            aws cloudformation deploy --template-file createCloudfront.yml --stack-name production-distro --parameter-overrides S3BucketName="newbucket-${CIRCLE_WORKFLOW_ID:0:7}"
  
  delete_old_bucket:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket. 
          command: |
            pwd && ls
            cat ~/textfile.txt
            OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
            aws s3api delete-bucket --bucket $OldBucketID

workflows:
  blue-green-workflow:
    jobs:
      # - deploy_infra:
      #     filters:
      #       branches:
      #         only: master
      # - configure_infra:
      #     requires:
      #       - deploy_infra
      # - run_smoke_tests:
      #     requires:
      #       - deploy_infra
      #       - configure_infra
      
      - create_new_bucket
      - get_last_deployment_id
      - promote_to_production:
          requires: 
            - create_new_bucket
      - delete_old_bucket:
          requires:
            - get_last_deployment_id
            - promote_to_production
